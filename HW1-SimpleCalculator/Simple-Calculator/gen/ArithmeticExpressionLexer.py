# Generated from C:/Subjects/Compiler_4022/First_excercise/Simple-Calculator/grammar/ArithmeticExpression.g4 by ANTLR 4.13.1
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,12,89,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,
        6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,
        7,13,1,0,1,0,1,1,1,1,1,2,1,2,1,3,1,3,1,4,1,4,1,5,1,5,1,6,1,6,1,7,
        1,7,3,7,46,8,7,1,8,5,8,49,8,8,10,8,12,8,52,9,8,1,8,1,8,4,8,56,8,
        8,11,8,12,8,57,1,9,4,9,61,8,9,11,9,12,9,62,1,10,1,10,5,10,67,8,10,
        10,10,12,10,70,9,10,1,10,1,10,1,11,4,11,75,8,11,11,11,12,11,76,1,
        11,1,11,1,12,1,12,1,13,1,13,5,13,85,8,13,10,13,12,13,88,9,13,1,68,
        0,14,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,0,19,0,21,9,23,10,25,
        11,27,12,1,0,4,1,0,48,57,3,0,9,9,13,13,32,32,3,0,44,44,65,90,97,
        122,4,0,44,44,48,57,65,90,97,122,93,0,1,1,0,0,0,0,3,1,0,0,0,0,5,
        1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,
        0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,1,29,1,
        0,0,0,3,31,1,0,0,0,5,33,1,0,0,0,7,35,1,0,0,0,9,37,1,0,0,0,11,39,
        1,0,0,0,13,41,1,0,0,0,15,45,1,0,0,0,17,50,1,0,0,0,19,60,1,0,0,0,
        21,64,1,0,0,0,23,74,1,0,0,0,25,80,1,0,0,0,27,82,1,0,0,0,29,30,5,
        61,0,0,30,2,1,0,0,0,31,32,5,43,0,0,32,4,1,0,0,0,33,34,5,45,0,0,34,
        6,1,0,0,0,35,36,5,42,0,0,36,8,1,0,0,0,37,38,5,47,0,0,38,10,1,0,0,
        0,39,40,5,40,0,0,40,12,1,0,0,0,41,42,5,41,0,0,42,14,1,0,0,0,43,46,
        3,17,8,0,44,46,3,19,9,0,45,43,1,0,0,0,45,44,1,0,0,0,46,16,1,0,0,
        0,47,49,7,0,0,0,48,47,1,0,0,0,49,52,1,0,0,0,50,48,1,0,0,0,50,51,
        1,0,0,0,51,53,1,0,0,0,52,50,1,0,0,0,53,55,5,46,0,0,54,56,7,0,0,0,
        55,54,1,0,0,0,56,57,1,0,0,0,57,55,1,0,0,0,57,58,1,0,0,0,58,18,1,
        0,0,0,59,61,7,0,0,0,60,59,1,0,0,0,61,62,1,0,0,0,62,60,1,0,0,0,62,
        63,1,0,0,0,63,20,1,0,0,0,64,68,5,34,0,0,65,67,9,0,0,0,66,65,1,0,
        0,0,67,70,1,0,0,0,68,69,1,0,0,0,68,66,1,0,0,0,69,71,1,0,0,0,70,68,
        1,0,0,0,71,72,5,34,0,0,72,22,1,0,0,0,73,75,7,1,0,0,74,73,1,0,0,0,
        75,76,1,0,0,0,76,74,1,0,0,0,76,77,1,0,0,0,77,78,1,0,0,0,78,79,6,
        11,0,0,79,24,1,0,0,0,80,81,5,10,0,0,81,26,1,0,0,0,82,86,7,2,0,0,
        83,85,7,3,0,0,84,83,1,0,0,0,85,88,1,0,0,0,86,84,1,0,0,0,86,87,1,
        0,0,0,87,28,1,0,0,0,88,86,1,0,0,0,9,0,45,50,57,62,68,76,84,86,1,
        6,0,0
    ]

class ArithmeticExpressionLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    T__0 = 1
    ADD = 2
    SUB = 3
    MUL = 4
    DIV = 5
    LPAREN = 6
    RPAREN = 7
    NUMERICALVALUE = 8
    STRING = 9
    WS = 10
    NEWLINE = 11
    ID = 12

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'='", "'+'", "'-'", "'*'", "'/'", "'('", "')'", "'\\n'" ]

    symbolicNames = [ "<INVALID>",
            "ADD", "SUB", "MUL", "DIV", "LPAREN", "RPAREN", "NUMERICALVALUE", 
            "STRING", "WS", "NEWLINE", "ID" ]

    ruleNames = [ "T__0", "ADD", "SUB", "MUL", "DIV", "LPAREN", "RPAREN", 
                  "NUMERICALVALUE", "FLOAT", "INTEGER", "STRING", "WS", 
                  "NEWLINE", "ID" ]

    grammarFileName = "ArithmeticExpression.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.1")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


